using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

public class PlayerController : MonoBehaviour
{
    public GameObject sphereObject;
    public Interactable focus; // focusable object
    public LayerMask excludeMask; // raycast mask
    public Transform groundCheck; // groundcheck reference
    public LayerMask groundMask; // layer of ground

    public int moveSpeed = 4; // player move speed
    public int rotationSpeed = 5; // player rotation speed

    Camera cam; // player camera
    Transform target; // target

    Pathfinding pathfinding; // used to instaniate pathfinding object
    List<Vector2> pathList; // path generated by pathfinding
    int pathIndex = 0; // index in pathfinding list

    // Start is called before the first frame update
    void Start()
    {
        pathfinding = new Pathfinding();
        cam = Camera.main;
    }

    // Update is called once per frame
    void Update()
    {
        Movement();

        if (EventSystem.current.IsPointerOverGameObject()) { return; }

        if (Input.GetMouseButtonDown(0)) // if left click (move)
        {
            Ray ray = cam.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit;

            if (Physics.Raycast(ray, out hit, 1000, ~excludeMask)) // if raycast is successfull
            {
                pathList = Pathfinding.Instance.FindVectorPath(SnapToGrid(transform.position), SnapToGrid(hit.point));
                pathIndex = 0;

                Interactable interactable = hit.collider.GetComponent<Interactable>();
                if (interactable != null)
                    SetFocus(interactable); // if focus is interactable, set focus
                else
                    RemoveFocus(); // remove focus, if any
            }
        }

        if (Input.GetMouseButtonDown(1)) // if right click (examine)
        {
            Ray ray = cam.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit;

            if (Physics.Raycast(ray, out hit, 1000, ~excludeMask))
            {
                
            }
        }

        if (target != null) // if focused
            FaceTarget(); // faces target
    }

    void Movement()
    {
        if (pathList != null)
        {
            Vector3 targetPosition = new Vector3(pathList[pathIndex].x, transform.position.y, pathList[pathIndex].y);
            if (Vector3.Distance(transform.position, targetPosition) > 0.1f) // if not near target, move towards
            {
                FollowTarget(targetPosition); // follows target
                if (target == null)
                    FaceTarget(targetPosition); // faces target
            }
            else // if near, increment to next target in list
            {
                pathIndex++;
                if (pathIndex >= pathList.Count) // if end, stop
                {
                    pathList = null;
                    transform.position = SnapToCenter(transform.position);
                }
            }

            // snaps player to ground level
            if (Physics.Raycast(groundCheck.position, Vector3.down, out RaycastHit hit, 10, groundMask))
                transform.position = new Vector3(transform.position.x, hit.point.y, transform.position.z);
        }
    }

    /*void ShowPath(List<Vector3> path)
    {
        foreach (Vector3 tile in path)
        {
            GameObject sphereGameObject = Instantiate(sphereObject, tile, Quaternion.identity);
            Destroy(sphereGameObject, 2f);
        }
    }*/

    Vector3 SnapToGrid(Vector3 pos) // y is round not floor to avoid rounding to negative digits
    {
        return new Vector3(Mathf.FloorToInt(pos.x), Mathf.RoundToInt(pos.y), Mathf.FloorToInt(pos.z));
    }

    Vector3 SnapToCenter(Vector3 pos) // y is round not floor to avoid rounding to negative digits
    {
        return new Vector3(Mathf.FloorToInt(pos.x) + 0.5f, Mathf.RoundToInt(pos.y), Mathf.FloorToInt(pos.z) + 0.5f);
    }

    void SetTarget(Interactable newTarget)
    {
        target = newTarget.transform; // target is target's transform
    }

    void FollowTarget(Vector3 targetPosition)
    {
        Vector3 direction = (targetPosition - transform.position).normalized; // gets direction
        transform.position = transform.position + direction * moveSpeed * Time.deltaTime; // moves player
    }

    void FaceTarget()
    {
        Vector3 direction = (target.position - transform.position).normalized; // gets direction
        Quaternion lookRotation = Quaternion.LookRotation(new Vector3(direction.x + 0.001f, 0f, direction.z)); // gets look rotation
        transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime); // rotates player
    }

    void FaceTarget(Vector3 targetPosition)
    {
        Vector3 direction = (targetPosition - transform.position).normalized; // gets direction
        Quaternion lookRotation = Quaternion.LookRotation(new Vector3(direction.x + 0.001f, 0f, direction.z)); // gets look rotation
        transform.rotation = Quaternion.Slerp(transform.rotation, lookRotation, rotationSpeed * Time.deltaTime); // rotates player
    }

    void SetFocus(Interactable newFocus)
    {
        if (newFocus != focus) // if focus is different from current focus
        {
            if (focus != null) // if focused on something else
                focus.OnDefocused();

            focus = newFocus; // sets new focus
            SetTarget(newFocus);
        }

        newFocus.OnFocused(transform); // provides player's transform
    }

    void RemoveFocus()
    {
        if (focus != null) // if focused, defocus
            focus.OnDefocused();

        focus = null; // remove focus
        target = null; // remove target
    }
}
